<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<!DOCTYPE doc SYSTEM "../../clonk.dtd">
<?xml-stylesheet type="text/xsl" href="../../clonk.xsl"?>
<doc>
<title>Kartengenerator</title>

<h id="Kartengenerator">Kartengenerator</h>
<part>
	<text>Neben einfachen dynamischen, statischen und exakten Landkarten steht auch ein leistungsfähiger dynamischer Kartengenerator für komplexe, mit Zufallswerten erzeugte Landschaften zur Verfügung.</text>
	<text>Dieser arbeitet mit verschachtelten und durch Operatoren verknüpfte Ebenen, denen jeweils ein Materialwert und diverse Attribute zugewiesen werden, die die Form beschreiben. Der Landschaftsgenerator rendert dabei die Karten mit Hilfe dieser Ebenen. Sie werden dann später wie reguläre statische Karten vergrößert</text>
	<text>Die Objektstruktur aus Karten, Ebenen und Attributen wird aus der Datei 'Landscape.txt' im Szenario gelesen.</text>
	
	<h id="Syntax">Syntax</h>
	<text>Die Sprache zur Beschreibung solcher Karten arbeitet grundsätzlich mit Objekten, Attributen und Operatoren. Groß- und Kleinschreibung wird beachtet. Objekte werden wie folgt definiert:</text>
	<code>Objekttyp [Name] { Attribute };</code>
	<text>Die Angabe eines Namens ist optional. Für die Objekttypen stehen momentan map, overlay und point (für den Algorithmus poly) zur Verfügung. Wenn ein Objekt benannt wird, kann es später also Vorlage für eine weitere Instanz definieren, die man mit</text>
	<code>Name { Attribute };</code>
	<text>definiert. Hier würde das vorher definierte Objekt 'Name' kopiert und gegebenenfalls um die entsprechenden Attribute ergänzt werden. Werden keine weiteren Attribute angegeben, können die Klammern hier auch weggelassen werden.</text>
	<text>Attribute haben grundsätzlich die Form</text>
	<code>Attribut=Wert;</code>
	<text>und können in beliebiger Reihenfolge im Objekt definiert werden. Sie können dabei optional % oder px als Einheit haben, und als Konstante oder Wertbereich (Zahl1 - Zahl2) angegeben werden (Ab CE). Bei Doppelten Zuweisungen gilt das zuletzt definierte.</text>
	<text>Zusätzlich zu den Attributen können wieder untergeordnete Objekte definiert und mit Operatoren verknüpft werden:</text>
	<code>Objekt1 Operator Objekt2;</code>
	<text>Operatorketten können beliebig lang sein und steuern die Kombination von Ebenen. Mögliche Operatoren sind | (oder), &amp; (und) und ^ (exklusiv oder).</text>
	<text>Einige Beispiele gibt es in den Dynamischen Welten.</text>
	
	<h id="Attributes">Attribute</h>
	<part>
		<h id="Attr_overlay">Ebenen (overlay)</h>
		<text>Folgende Attribute sind definiert:</text>
		<text><table>
			<rowh>
				<col>Attribut</col>
				<col>Typ</col>
				<col>Beschreibung</col>
			</rowh>
			<row>
				<col>mat</col>
				<col>Material</col>
				<col>Material. Das Material muss in der entsprechenden Material.c4g definiert sein. Standard ist Himmel.</col>
			</row>
			<row>
				<col>tex</col>
				<col>Textur</col>
				<col>Textur. Die Material-Textur-Kombination sollte in der geladenen TexMap vorhanden sein.</col>
			</row>
			<row>
				<col>x, y, wdt, hgt</col>
				<col>Integer</col>
				<col>Größe der beschriebenen Ebene auf der übergeordneten Ebene in Prozent.</col>
			</row>
			<row>
				<col>algo</col>
				<col>Algorithmus</col>
				<col>Füllungstyp der Ebene. Für verfügbare Füllungen siehe <a href="#Algos">Füllalgorithmen</a></col>
			</row>
			<row>
				<col>zoomX, zoomY</col>
				<col>Integer</col>
				<col>Gibt die entsprechende Zoomstufe an, um die die Füllung vergrößert/verkleinert werden soll. -100 bis +99</col>
			</row>
			<row>
				<col>ox, oy</col>
				<col>Integer</col>
				<col>Offset auf den Füllalgorithmus in Prozent. Hiermit kann z.B. eine Sinuskurve verschoben werden.</col>
			</row>
			<row>
				<col>a, b</col>
				<col>Integer</col>
				<col>Zusatzparameter für den Füllalgorithmus</col>
			</row>
			<row>
				<col>turbulence</col>
				<col>Integer</col>
				<col>10 bis 10.000; Deformierung der Ebene</col>
			</row>
			<row>
				<col>rotate</col>
				<col>Integer</col>
				<col>-180 bis +180. Drehung der Ebene.</col>
			</row>
			<row>
				<col>invert</col>
				<col>Boolean</col>
				<col>0 oder 1. Bei 1 wird die Ebenenfüllung umgekehrt.</col>
			</row>
			<row>
				<col>seed</col>
				<col>Integer</col>
				<col>Zufallsseed für die Ebenenberechnung. Bei festem Seed wird die Ebene immer gleich erzeugt.</col>
			</row>
			<row>
				<col>loosebounds</col>
				<col>Boolean</col>
				<col>Legt fest, ob die Grenzen durch rotate, turbulence, ox und oy mit transformiert werden.</col>
			</row>
			<row>
				<col>mask</col>
				<col>Boolean</col>
				<col>0 oder 1. Bei 1 wird die Ebene nie gezeichnet. Auf untergeordnete Ebenen hat dies keinen Effekt.</col>
			</row>
			<row>
				<col>grp</col>
				<col>b</col>
				<col>0 oder 1. Bei 1 gilt die Ebene als gesetzt, wenn der lokale Algorithmus oder eine der untergeordneten Ebenen erfüllt ist. Folgt ein Operator, so wird die Ebene selber nicht gezeichnet.</col>
			</row>
			<row>
				<col>sub</col>
				<col>Boolean</col>
				<col>0 oder 1. Bei 1 ist das Material unterirdisch (standard)</col>
			</row>
			<row>
				<col>lambda</col>
				<col>Integer</col>
				<col>0 bis 20. Zusätzliche turbulence-Iterationen.</col>
			</row>
		</table></text>
		
		<h id="Attr_map">Karten (map)</h>
		<text>Karten enthalten grundsätzlich alle Attribute, die Ebenen auch enthalten. Allerdings machen hier nur mat, tex und sub wirklich Sinn, und geben die Hintergrundfüllung an.</text>
	</part>
	
	<h id="Algos">Füllalgorithmen</h>
	<text>Um festzustellen, ob ein Punkt auf der Karte eine Ebene trifft, wird er zunächst verschoben (zoom, turbulence, rotate, ox/oy), und anschließend ihr Algorithmus ausgewertet. Außerdem wird geprüft, ob er innerhalb der Maskengrenzen (x, y, wdt, hgt) liegt. Normalerweise vor, bei loosebounds nach der Transformation.</text>
		
	<dl>
		<dt id="Algo_solid">solid</dt>
		<dd><text>Standardalgorithmus. Gibt immer wahr zurück.</text></dd>
		
		<dt id="Algo_random">random</dt>
		<dd><text>Zufall. Der Parameter a gibt die Wahrscheinlichkeit an; je höher a, desto seltener ist der Punkt ausgefüllt.</text></dd>
		
		<dt id="Algo_checker">checker</dt>
		<dd><text>Abwechselnd ausgefüllte Kästen der Größe 10 (bei normalem Zoom)</text></dd>
		
		<dt id="Algo_bozo">bozo</dt>
		<dd><text>Flecken. Über a kann die Fleckengröße verringert werden.</text></dd>
		
		<dt id="Algo_sin">sin</dt>
		<dd><text>Horizontale Sinuskurve; Bei Standardzoom beträgt die Amplitude 10, die Periode 20 Pixel.</text></dd>
		
		<dt id="Algo_boxes">boxes</dt>
		<dd><text>Regelmäßige Blöcke. a gibt die Blockgröße, b den Abstand der Mittelpunkte an.</text></dd>
		
		<dt id="Algo_rndchecker">rndchecker</dt>
		<dd><text>Wie checker, jedoch ist die Erfüllung nicht alternierend sondern zufällig.</text></dd>
		
		<dt id="Algo_lines">lines</dt>
		<dd><text>Senkrechte Linien. a gibt die Linienstärke an; b den Abstand der Linienmitten.</text></dd>
		
		<dt id="Algo_border">border</dt>
		<dd><text>Zieht einen inneren Rahmen im übergeordnete Layer (bzw der gesamten Operatorkette). a und b sind die horizontale und vertikale Rahmendicke. Da zur Berechnung das übergeordnete Layer abgefragt werden muss, darf dieses natürlich nicht als Gruppe (grp) definiert sein.</text></dd>
		
		<dt id="Algo_mandel">mandel</dt>
		<dd><text>Zeichnet die Mandelbrotmenge in den Zielbereich. Über den Parameter a kann die Iterationstiefe verändert werden (Standard 1000). Ungezommt wird das gesamte "Apfelmännchen" in den Zielbereich gezeichnet (entspricht dem Bereich -2-2i bis 2+2i)</text></dd>
		
		<dt id="Algo_rndall">rndall</dt>
		<dd><text>Der gesamten Bereich gilt als erfüllt oder nicht erfüllt, je nach Zufallswert. Der Parameter a gibt die Erfüllungschance in Prozent an. Mit diesem algo können beispielsweise mehrere Karten untergeordnet von einem mask=1-Layer angegeben werden, zwischen denen dann gewählt wird.</text></dd>
		
		<dt id="Algo_script">script</dt>
		<dd><text>Das Verhalten des Algorithmus wird durch eine Script-Funktion im <emlink href="scenario/script.html">Szenarioscript</emlink> festgelegt. Diese sollte folgende Form haben:</text>
		<code>func ScriptAlgo[Overlay-Name](iX, iY, iAlpha, iBeta)</code>
		<text>Als Rückgabewert wird 0 (= kein Material) oder 1 (= Material) erwartet. iX und iY sind die Koordinaten (in Pixeln), für den der Algorithmuswert zurückgegeben werden soll. iAlpha und iBeta entsprechen den Algo-Parametern a und b.</text>
		<text>Hat die Ebene keinen Namen, wird die Funktion "ScriptAlgo" benutzt.</text></dd>
		
		<dt id="Algo_poly">poly</dt>
		<dd><text>Ein Pixel gilt als erfüllt, wenn er innerhalb des durch die im overlay enthaltenen Punkte definierten Polygons liegt. Punkte können durch</text>
		<code>point { x=&lt;X-Koordinate des Eckpunkts&gt;&lt;Einheit&gt;; y=&lt;Y-Koordinate&gt;&gt;&lt;Einheit&gt;; };</code> 
		<text>angegeben werden. Ab CE. Beispiel:</text>
		<code>overlay { algo=poly; mat=Earth;
  point { x=10px; y=25%; };  
  point { x=20px; y=25%; };  
  point { x=10px; y=75%; };  
  point { x=20px; y=75%; };  
  point { x=30px; y=50%; };
};</code></dd>
	</dl>
	
	<h id="Operators">Operatoren</h>
	<text>Mehrere Ebenen können mit Operatoren verbunden werden. Diese werden von oben nach unten ausgewertet, und es wird nur das unterste Glied der Operatorkette ggf gezeichnet. Bei einer Gruppe (grp) werden zusätzlich die untergeordneten Ebenen in die Auswertung mit einbezogen und nicht gezeichnet. Definierte Operatoren sind | (oder), &amp; (und) und ^ (exklusiv oder).</text>
</part>

<author>Sven2</author><date>Juli 2001</date>

</doc>
