<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<!DOCTYPE funcs SYSTEM "../../../clonk.dtd">
<?xml-stylesheet type="text/xsl" href="../../../clonk.xsl"?>
<funcs>
  <func>
    <title>AddCommand</title>
    <category>Objekte</category>
    <subcat>Commands</subcat>
    <version>4.6.5.0 CP<extversion>4.9.1.0 GWE</extversion><extversion>4.9.5.0 CE</extversion></version>
    <syntax>
      <rtype>bool</rtype>
      <params>
        <param>
          <type>object</type>
          <name>pObj</name>
          <desc>Objekt, dem das Kommando gegeben wird.</desc>
        </param>
        <param>
          <type>string</type>
          <name>szCommand</name>
          <desc>Kommandoname (als String). Siehe untere Tabelle </desc>
        </param>
        <param>
          <type>object</type>
          <name>pTarget</name>
          <optional />
          <desc>Zielobjekt für Aktion</desc>
        </param>
        <param>
          <type>int</type>
          <name>iX</name>
          <optional />
          <desc>X-Zielkoordinate</desc>
        </param>
        <param>
          <type>int</type>
          <name>iY</name>
          <optional />
          <desc>Y-Zielkoordinate</desc>
        </param>
        <param>
          <type>object</type>
          <name>pTarget2</name>
          <optional />
          <desc>zweites Zielobjekt</desc>
        </param>
        <param>
          <type>int</type>
          <name>iInterval</name>
          <optional />
          <desc>Zeit (in Ticks/Frames), bis das Kommando abgebrochen wird (es wird dann mit dem nachsten in der Kommandoliste fortgesetzt)</desc>
        </param>
        <param>
          <type>any</type>
          <name>Data</name>
          <optional />
          <desc>zusätzliche Daten zur Aktion</desc>
        </param>
        <param>
          <type>int</type>
          <name>iRetries</name>
          <optional />
          <desc>Anzahl der Wiederholungen (wenn das Kommando fehlschlägt), bis das Kommando abgebrochen wird.</desc>
        </param>
        <param>
          <type>int</type>
          <name>iBaseMode</name>
          <optional />
          <desc>Bestimmt, wie beim Fehlschlag des Commands verfahren wird.<br/><br/>
            <table>
              <rowh><col>iBaseMode</col> <col>Name</col> <col>Beschreibung</col>
                    <col>Fehlschlagsmeldung und CallFailed-Aufrufe</col> <col>Nächster Befehl</col></rowh>
              <row><col>0</col> <col>C4CMD_SilentSub</col> <col>Stiller Unterbefehl</col>
                   <col>Nur wenn dies der letzte Befehl ist</col> <col>Schlägt fehl</col></row>
              <row><col>3</col> <col>C4CMD_Sub</col> <col>Unterbefehl</col>
                   <col>Wenn der nächste Befehl keine Wiederholungen mehr hat oder dies der letzte Befehl ist</col> <col>Schlägt fehl</col></row>
              <row><col>2</col> <col>C4CMD_SilentBase</col> <col>Stiller Basisbefehl</col>
                   <col>Nie</col> <col>Schlägt nicht fehl</col></row>
              <row><col>1</col> <col>C4CMD_Base</col> <col>Basisbefehl</col>
                   <col>Immer</col> <col>Schlägt nicht fehl</col></row>
            </table>
          </desc>
        </param>
      </params>
    </syntax>

    <desc>Fügt ein Kommado in die Kommandoliste eines Objekts hinzu (an den Anfang, siehe auch <funclink>AppendCommand</funclink>). D.h. es wird ein Kommando hinzugefügt, welches das Objekt vor anderen vorher gegebenen Kommandos auszuführen hat (war vorher kein Kommando gesetzt, so entspricht AddCommand <funclink>SetCommand</funclink>) <br />
          Für Kommando-Beschreibungen siehe <funclink>SetCommand</funclink>
	</desc>
    <remark>
          Mit AddCommand hinzugefügte Befehle werden nicht an gesteuerte Fahrzeuge weitergeleitet (siehe VehicleControl)
    </remark>
    <examples>
      <example>
        <code>Timer:
  var obj = <funclink>FindObject</funclink>(0, -20, -40, 40, 40, <funclink>OCF_CrewMember</funclink>();
  if(obj)
    if(<funclink>GetComDir</funclink>(obj) == <funclink>COMD_Right</funclink>())
      <funclink>AddCommand</funclink>(obj, "Jump");
  return();</code>
        <text>
Dieser Timer-Script bewirkt (aus einem Objekt aufgerufen, welches auf dem Boden liegt), dass jeder Clonk, der über das Objekt von links nach rechts hinübergeht, springt. Dazu wird erst ein Clonk (bzw. CrewMember) über dem Objekt gesucht. Wurde ein solcher gefunden, und läuft er im Moment nach rechts (ComDir), so wird dem Clonk das Kommando "Jump" hinzugefügt.
Das besondere an dem Script ist, dass die alte Befehlskette nicht angetastet wird; der Clonk wird nachdem er gesprungen hat seine Befehlskette weiter verarbeiten.<br />
Mithilfe dieses Script kann man einem Clonk z.B. beibringen, an einer bestimmten Stelle automatisch über einen Abgrund zu hüpfen.
        </text>
      </example>
    </examples>
    <related>
      <funclink>SetCommand</funclink>
      <funclink>GetCommand</funclink>
      <funclink>AppendCommand</funclink>
      <funclink>FinishCommand</funclink>
	  <funclink>PlayerObjectCommand</funclink>
    </related>
  </func>
  <author>PeterW</author><date>November 2001</date>
  <author>Günther</author><date>Januar 2005</date>
</funcs>
